#!/bin/python
import os
import struct
import sys
from collections import OrderedDict
import io
import csv
from functools import partial, reduce

sys.path.append(os.path.join(os.path.dirname(__file__), 'common'))
from common import utils, tilesets
from sw2gb import game

# The set of scenes [ADDR:2LE]
SCENE_BANK = 0x23
SCENE_TABLE_START = (SCENE_BANK, 0x410A)
SCENE_TABLE_END = (SCENE_BANK, 0x4292)
# For now, we just forcibly ignore the last 3 which are empty
SCENE_TABLE_COUNT = ((SCENE_TABLE_END[1] - SCENE_TABLE_START[1]) // 2)
# TODO: This end is wrong, need to figure out the true end
SCRIPTS_END = (SCENE_BANK, 0x61e4)

# Arguments
script_name = sys.argv[0]
rom_path = sys.argv[1]
game_scene_src_dir = sys.argv[2]
game_scene_script_dir = sys.argv[3]

# Load tileset info
character_table = tilesets.get_tileset("Main", override_offset=0x00)

cs = game.GameSceneScript(character_table)
COMMANDS = cs.COMMANDS

with open(rom_path, 'rb') as rom:
    # Get the list of scenes
    scene_addresses = []
    rom.seek(utils.rom2realaddr(SCENE_TABLE_START))
    for index in range(0, SCENE_TABLE_COUNT):
        scene_addresses.append(utils.read_short(rom))

    scenes = { k : f'GameScene{v:02X}' for v, k in enumerate(sorted(list(set(scene_addresses)))) }

    # For each scene, there's some set of scripts
    # Scripts can be shared between multiple scenes
    script_addresses = OrderedDict()
    for addr in scene_addresses:
        rom.seek(utils.rom2realaddr((SCENE_BANK, addr)))
        script_addresses[addr] = list(iter(partial(utils.read_short, rom), 0x00))

    # Maintain a unique set of every script to dump
    scripts = { k : f'GameSceneScript{v:04X}' for v, k in enumerate(sorted(list(set(reduce(lambda x, y: x + y, script_addresses.values()))))) }

    with open(os.path.join(game_scene_src_dir, f'game_scene_table.asm'), 'w') as scene_table_fp:
        scene_table_fp.write(f"; File initially autogenerated by {script_name}\n")
        scene_table_fp.write('\n')
        scene_table_fp.write('INCLUDE "game/src/common/macros.asm"\n\n')

        for x in range(0, len(scenes)):
            scene_table_fp.write(f'INCLUDE "{os.path.join(game_scene_script_dir, f"game_scene_{x:02X}.asm")}"\n')
        scene_table_fp.write('\n')

        scene_table_fp.write(f'SECTION "Game Scene Table", ROMX[${SCENE_TABLE_START[1]:04X}], BANK[${SCENE_TABLE_START[0]:02X}]\n')
        scene_table_fp.write('GameSceneTable::\n')
        for x in scene_addresses:
            scene_table_fp.write(f'  dw {scenes[x]}\n')
        scene_table_fp.write('\n')

        for index, addr in enumerate(script_addresses):
            with open(os.path.join(game_scene_script_dir, f'game_scene_{index:02X}.asm'), 'w') as scene_fp:
                scene_fp.write(f"; File initially autogenerated by {script_name}\n")
                scene_fp.write(f'SECTION "Game Scene {index:02X}", ROMX[${addr:04X}], BANK[${SCENE_BANK:02X}]\n')
                scene_fp.write(f'GameScene{index:02X}::\n')
                for x in script_addresses[addr]:
                    scene_fp.write(f'  dw {scripts[x]}\n')
                scene_fp.write('  dw $0000\n')

    # TODO: For now, just dump scripts as bytes in a single file
    with open(os.path.join(game_scene_src_dir, f'game_scene_scripts.asm'), 'w') as script_fp:
        script_fp.write(f"; File initially autogenerated by {script_name}\n")
        script_fp.write('\n')
        script_fp.write('INCLUDE "game/src/common/macros.asm"\n\n')
        scene_addr = iter(list(script_addresses.keys()) + [0x7fff])
        next_scene_address = next(scene_addr)
        script_addr = sorted(list(scripts.keys()))
        script_addr += [SCRIPTS_END[1]]
        for index in range(0, len(script_addr) - 1):
            rom.seek(utils.rom2realaddr((SCENE_BANK, script_addr[index])))
            while next_scene_address < script_addr[index]:
                next_scene_address = next(scene_addr)
            l = min(next_scene_address, script_addr[index + 1]) - script_addr[index]
            data = rom.read(l)
            script_fp.write(f'SECTION "Game Scene Script {index:04X}", ROMX[${script_addr[index]:04X}], BANK[${SCENE_BANK:02X}]\n')
            script_fp.write(f'{scripts[script_addr[index]]}::\n')
            if l > 0:
                script_fp.write(f'  db ${data[0]:02X}, ${data[1]:02X} ; (x, y)\n')
                script_fp.write(f'  db {",".join([f"${x:02X}" for x in data[2:]])}\n')
            script_fp.write('\n')